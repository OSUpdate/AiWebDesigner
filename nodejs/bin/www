#!/usr/bin/env node

/**
 * Module dependencies.
 */
var WebpackDevServer = require("webpack-dev-server");
var webpack = require("webpack");
var app = require("../app");
var debug = require("debug")("react-tutorial:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */
const devPort = 3001;
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
console.log("Server is running on development mode");

const config = require("../webpack.config");
let compiler = webpack(config);
let devServer = new WebpackDevServer(compiler, config.devServer);
devServer.listen(devPort, () => {
    console.log("webpack-dev-server is listening on port", devPort);
});
/*
if(process.env.NODE_ENV == "development") {
    console.log("Server is running on development mode");

    const config = require("../webpack.config");
    let compiler = webpack(config);
    let devServer = new WebpackDevServer(compiler, config.devServer);
    devServer.listen(devPort, () => {
        console.log("webpack-dev-server is listening on port", devPort);
    });
}
*/
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}
